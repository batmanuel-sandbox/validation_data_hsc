import lsst.pipe.drivers.multiBandDriver
assert type(config)==lsst.pipe.drivers.multiBandDriver.MultiBandDriverConfig, 'config is of type %s.%s instead of lsst.pipe.drivers.multiBandDriver.MultiBandDriverConfig' % (type(config).__module__, type(config).__name__)
import lsst.meas.extensions.photometryKron.version
import lsst.meas.extensions
import lsst.meas.extensions.photometryKron
import lsst.meas.extensions.shapeHSM.hsmLib
import lsst.meas.extensions.shapeHSM
import lsst.meas.extensions.photometryKron.kronLib
import lsst.meas.extensions.shapeHSM.version
# Clobber existing merged detections?
config.clobberMergedDetections=False

# Run subtask to apply aperture corrections
config.forcedPhotCoadd.doApCorr=True

# Mapping of reference columns to source columns
config.forcedPhotCoadd.copyColumns={'id': 'objectId', 'parent': 'parentObjectId', 'deblend_nChild': 'deblend_nChild'}

# Dataset (without coadd prefix) that should be used to obtain (Heavy)Footprints for sources.  Must have IDs that match those of the reference catalog.  If None, Footprints will be generated by transforming the reference Footprints.
config.forcedPhotCoadd.footprintDatasetName='meas'

# flux measurement algorithms in getApCorrNameSet() to ignore; if a name is listed that does not appear in getApCorrNameSet() then a warning is logged
config.forcedPhotCoadd.applyApCorr.ignoreList=[]

# set the general failure flag for a flux when it cannot be aperture-corrected?
config.forcedPhotCoadd.applyApCorr.doFlagApCorrFailures=True

# correction factor for psfFlux error
config.forcedPhotCoadd.afterburners.plugins['base_ClassificationExtendedness'].psfErrFactor=0.0

# correction factor for modelFlux error
config.forcedPhotCoadd.afterburners.plugins['base_ClassificationExtendedness'].modelErrFactor=0.0

# critical ratio of model to psf flux
config.forcedPhotCoadd.afterburners.plugins['base_ClassificationExtendedness'].fluxRatio=0.925

config.forcedPhotCoadd.afterburners.plugins.names=[]
# Bandpass for reference sources; None indicates chi-squared detections.
config.forcedPhotCoadd.references.filter=None

# Only include reference sources for each patch that lie within the patch's inner bbox
config.forcedPhotCoadd.references.removePatchOverlaps=False

# Coadd name: typically one of deep or goodSeeing.
config.forcedPhotCoadd.references.coaddName='deep'

# Mapping of reference columns to source columns
config.forcedPhotCoadd.measurement.copyColumns={'id': 'objectId', 'parent': 'parentObjectId'}

# When measuring, replace other detected footprints with noise?
config.forcedPhotCoadd.measurement.doReplaceWithNoise=True

# The seed multiplier value to use for random number generation.  0 will not set seed.
config.forcedPhotCoadd.measurement.noiseReplacer.noiseSeedMultiplier=1

# Add ann offset to the generated noise.
config.forcedPhotCoadd.measurement.noiseReplacer.noiseOffset=0.0

# How to choose mean and variance of the Gaussian noise we generate?
# Allowed values:
# 	variance	Mean = 0, variance = the image's variance
# 	meta	Mean = 0, variance = the "BGMEAN" metadata entry
# 	measure	Measure clipped mean and variance from the whole image
# 
config.forcedPhotCoadd.measurement.noiseReplacer.noiseSource='measure'

# Strictness of Astropy unit compatibility check, can be 'raise', 'warn' or 'silent'
config.forcedPhotCoadd.measurement.checkUnitsParseStrict='raise'

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_CircularApertureFlux'].doMeasure=True

# Warping kernel used to shift Sinc photometry coefficients to different center positions
config.forcedPhotCoadd.measurement.plugins['base_CircularApertureFlux'].shiftKernel='lanczos5'

# Radius (in pixels) of apertures.
config.forcedPhotCoadd.measurement.plugins['base_CircularApertureFlux'].radii=[3.0, 4.5, 6.0, 9.0, 12.0, 17.0, 25.0, 35.0, 50.0, 70.0]

# Maximum radius (in pixels) for which the sinc algorithm should be used instead of the faster naive algorithm.  For elliptical apertures, this is the minor axis radius.
config.forcedPhotCoadd.measurement.plugins['base_CircularApertureFlux'].maxSincRadius=12.0

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeRegauss'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeRegauss'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# Field name for number of deblend children
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeRegauss'].deblendNChild=''

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeBj'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeBj'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# Field name for number of deblend children
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeBj'].deblendNChild=''

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_PeakCentroid'].doMeasure=True

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_NaiveCentroid'].doMeasure=True

# Value to subtract from the image pixel values
config.forcedPhotCoadd.measurement.plugins['base_NaiveCentroid'].background=0.0

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_PixelFlags'].doMeasure=True

# List of mask planes to be searched for which occur in the center of a footprint. If any of the planes are found they will have a corresponding pixel flag set.
config.forcedPhotCoadd.measurement.plugins['base_PixelFlags'].masksFpCenter=['BRIGHT_OBJECT']

# List of mask planes to be searched for which occur anywhere within a footprint. If any of the planes are found they will have a corresponding pixel flag set.
config.forcedPhotCoadd.measurement.plugins['base_PixelFlags'].masksFpAnywhere=['CLIPPED', 'BRIGHT_OBJECT']

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_ScaledApertureFlux'].doMeasure=True

# Warping kernel used to shift Sinc photometry coefficients to different center positions
config.forcedPhotCoadd.measurement.plugins['base_ScaledApertureFlux'].shiftKernel='lanczos5'

# Scaling factor of PSF FWHM for aperture radius.
config.forcedPhotCoadd.measurement.plugins['base_ScaledApertureFlux'].scale=3.14

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeLinear'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeLinear'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# Field name for number of deblend children
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeLinear'].deblendNChild=''

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_PsfFlux'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.forcedPhotCoadd.measurement.plugins['base_PsfFlux'].badMaskPlanes=[]

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeKsb'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeKsb'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# Field name for number of deblend children
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmShapeKsb'].deblendNChild=''

# Largest aperture for which to use the slow, accurate, sinc aperture code
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].maxSincRadius=10.0

# Number of times to iterate when setting the Kron radius
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].nIterForRadius=1

# Use the Footprint size as part of initial estimate of Kron radius
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].useFootprintRadius=False

# Minimum Kron radius (if == 0.0 use PSF's Kron radius) if enforceMinimumRadius. Also functions as fallback aperture radius if set.
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].minimumRadius=0.0

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].doMeasure=True

# Multiplier of rms size for aperture used to initially estimate the Kron radius
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].nSigmaForRadius=6.0

# If true check that the Kron radius exceeds some minimum
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].enforceMinimumRadius=True

# if true, use existing shape and centroid measurements instead of fitting
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].fixed=False

# Smooth image with N(0, smoothingSigma^2) Gaussian while estimating R_K
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].smoothingSigma=-1.0

# Number of Kron radii for Kron flux
config.forcedPhotCoadd.measurement.plugins['ext_photometryKron_KronFlux'].nRadiusForFlux=2.5

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_GaussianCentroid'].doMeasure=True

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_PeakLikelihoodFlux'].doMeasure=True

# Name of warping kernel (e.g. "lanczos4") used to compute the peak
config.forcedPhotCoadd.measurement.plugins['base_PeakLikelihoodFlux'].warpingKernelName='lanczos4'

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_SdssCentroid'].doMeasure=True

# if the peak's less than this insist on binning at least once
config.forcedPhotCoadd.measurement.plugins['base_SdssCentroid'].peakMin=-1.0

# fiddle factor for adjusting the binning
config.forcedPhotCoadd.measurement.plugins['base_SdssCentroid'].wfac=1.5

# maximum allowed binning
config.forcedPhotCoadd.measurement.plugins['base_SdssCentroid'].binmax=16

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_Blendedness'].doMeasure=True

# Whether to compute quantities related to the Gaussian-weighted shape
config.forcedPhotCoadd.measurement.plugins['base_Blendedness'].doShape=True

# Whether to compute HeavyFootprint dot products (the old deblend.blendedness parameter)
config.forcedPhotCoadd.measurement.plugins['base_Blendedness'].doOld=True

# Whether to compute quantities related to the Gaussian-weighted flux
config.forcedPhotCoadd.measurement.plugins['base_Blendedness'].doFlux=True

# Radius factor that sets the maximum extent of the weight function (and hence the flux measurements)
config.forcedPhotCoadd.measurement.plugins['base_Blendedness'].nSigmaWeightMax=3.0

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_GaussianFlux'].doMeasure=True

# FIXME! NEVER DOCUMENTED!
config.forcedPhotCoadd.measurement.plugins['base_GaussianFlux'].background=0.0

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmPsfMoments'].doMeasure=True

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmSourceMoments'].doMeasure=True

# Mask planes used to reject bad pixels.
config.forcedPhotCoadd.measurement.plugins['ext_shapeHSM_HsmSourceMoments'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_TransformedCentroid'].doMeasure=True

# Maximum centroid shift, limited to 2-10
config.forcedPhotCoadd.measurement.plugins['base_SdssShape'].maxShift=0.0

# Convergence tolerance for FWHM
config.forcedPhotCoadd.measurement.plugins['base_SdssShape'].tol2=9.999999747378752e-05

# Convergence tolerance for e1,e2
config.forcedPhotCoadd.measurement.plugins['base_SdssShape'].tol1=9.999999747378752e-06

# Whether to also compute the shape of the PSF model
config.forcedPhotCoadd.measurement.plugins['base_SdssShape'].doMeasurePsf=True

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_SdssShape'].doMeasure=True

# Additional value to add to background
config.forcedPhotCoadd.measurement.plugins['base_SdssShape'].background=0.0

# Maximum number of iterations
config.forcedPhotCoadd.measurement.plugins['base_SdssShape'].maxIter=100

# whether to run this plugin in single-object mode
config.forcedPhotCoadd.measurement.plugins['base_TransformedShape'].doMeasure=True

config.forcedPhotCoadd.measurement.plugins.names=['base_CircularApertureFlux', 'base_TransformedShape', 'base_PsfFlux', 'ext_photometryKron_KronFlux', 'base_GaussianFlux', 'base_TransformedCentroid']
# the name of the flux measurement algorithm used for calibration
config.forcedPhotCoadd.measurement.slots.calibFlux=None

# the name of the algorithm used to set the source aperture flux slot
config.forcedPhotCoadd.measurement.slots.apFlux=None

# the name of the algorithm used to set the source inst flux slot
config.forcedPhotCoadd.measurement.slots.instFlux=None

# the name of the algorithm used to set source moments parameters
config.forcedPhotCoadd.measurement.slots.shape='base_TransformedShape'

# the name of the centroiding algorithm used to set source x,y
config.forcedPhotCoadd.measurement.slots.centroid='base_TransformedCentroid'

# the name of the algorithm used to set the source model flux slot
config.forcedPhotCoadd.measurement.slots.modelFlux=None

# the name of the algorithm used to set the source psf flux slot
config.forcedPhotCoadd.measurement.slots.psfFlux=None

# coadd name: typically one of deep or goodSeeing
config.forcedPhotCoadd.coaddName='deep'

# Clobber existing merged measurements?
config.clobberMergedMeasurements=False

# Clobber existing detections?
config.clobberDetections=False

# Try to add this many sky objects to the mergeDet list, which will
# then be measured along with the detected objects in sourceMeasurementTask
config.mergeCoaddDetections.nSkySourcesPerPatch=100

# Name of `filter' used to label sky objects (e.g. flag merge_peak_sky is set)
# (N.b. should be in MergeMeasurementsConfig.pseudoFilterList)
config.mergeCoaddDetections.skyFilterName='sky'

# Priority-ordered list of bands for the merge.
config.mergeCoaddDetections.priorityList=['HSC-I2', 'HSC-I', 'HSC-R', 'HSC-Z', 'HSC-Y', 'HSC-G', 'NB0921', 'NB0816', 'NB1010', 'NB0387', 'NB0515']

# Radius, in pixels, of sky objects
config.mergeCoaddDetections.skySourceRadius=8.0

# Always keep this many peaks in each family
# 	Valid Range = [1,inf)
config.mergeCoaddDetections.cullPeaks.rankSufficient=20

# Keep peaks with less than this normalized rank that also match the rankConsidered condition.
# 	Valid Range = [0.0,inf)
config.mergeCoaddDetections.cullPeaks.rankNormalizedConsidered=0.7

# Keep peaks with less than this rank that also match the rankNormalizedConsidered condition.
# 	Valid Range = [1,inf)
config.mergeCoaddDetections.cullPeaks.rankConsidered=30

# Always keep peaks detected in this many bands
# 	Valid Range = [1,inf)
config.mergeCoaddDetections.cullPeaks.nBandsSufficient=2

# Maximum number of trial sky object positions
# (default: nSkySourcesPerPatch*nTrialSkySourcesPerPatchMultiplier)
config.mergeCoaddDetections.nTrialSkySourcesPerPatch=None

# Minimum distance from closest peak to create a new one (in arcsec).
config.mergeCoaddDetections.minNewPeak=1.0

# When adding new catalogs to the merge, all peaks less than this distance  (in arcsec) to an existing peak will be flagged as detected in that catalog.
config.mergeCoaddDetections.maxSamePeak=0.3

# Set nTrialSkySourcesPerPatch to
#     nSkySourcesPerPatch*nTrialSkySourcesPerPatchMultiplier
# if nTrialSkySourcesPerPatch is None
config.mergeCoaddDetections.nTrialSkySourcesPerPatchMultiplier=5

# Name of coadd
config.mergeCoaddDetections.coaddName='deep'

# Number of pixels to grow the detected footprint mask when adding sky objects
config.mergeCoaddDetections.skyGrowDetectedFootprints=0

# Are we reprocessing?
# 
# This exists as a workaround for large deblender footprints causing large memory use and/or very slow processing.  We refuse to deblend those footprints when running on a cluster and return to reprocess on a machine with larger memory or more time if we consider those footprints important to recover.
config.reprocessing=False

# Name of coadd
config.coaddName='deep'

# Clobber existing forced photometry?
config.clobberForcedPhotometry=False

import lsst.meas.extensions.photometryKron.version
import lsst.meas.extensions
import lsst.meas.extensions.photometryKron
import lsst.meas.extensions.shapeHSM.hsmLib
import lsst.meas.extensions.shapeHSM
import lsst.meas.extensions.photometryKron.kronLib
import lsst.meas.extensions.shapeHSM.version
# Apply aperture corrections
config.measureCoaddSources.doApCorr=True

# Source catalog flags to propagate, with the threshold of relative occurrence.
config.measureCoaddSources.propagateFlags.flags={'calib_psfCandidate': 0.2, 'calib_psfUsed': 0.2}

# Source matching radius (arcsec)
config.measureCoaddSources.propagateFlags.matchRadius=0.2

# Whether to match sources to CCD catalogs to propagate flags (to e.g. identify PSF stars)
config.measureCoaddSources.doPropagateFlags=True

# flux measurement algorithms in getApCorrNameSet() to ignore; if a name is listed that does not appear in getApCorrNameSet() then a warning is logged
config.measureCoaddSources.applyApCorr.ignoreList=[]

# set the general failure flag for a flux when it cannot be aperture-corrected?
config.measureCoaddSources.applyApCorr.doFlagApCorrFailures=True

# Name of coadd
config.measureCoaddSources.coaddName='deep'

# Run afterburner task
config.measureCoaddSources.doRunAfterburners=True

# Match sources to reference catalog?
config.measureCoaddSources.doMatchSources=True

# Strictness of Astropy unit compatibility check, can be 'raise', 'warn' or 'silent'
config.measureCoaddSources.checkUnitsParseStrict='raise'

# Deblend sources?
config.measureCoaddSources.doDeblend=True

import lsst.meas.extensions.photometryKron.version
import lsst.meas.extensions
import lsst.meas.extensions.photometryKron
import lsst.meas.extensions.shapeHSM.hsmLib
import lsst.meas.extensions.shapeHSM
import lsst.meas.extensions.photometryKron.kronLib
import lsst.meas.extensions.shapeHSM.version
# The seed multiplier value to use for random number generation.  0 will not set seed.
config.measureCoaddSources.measurement.noiseReplacer.noiseSeedMultiplier=1

# Add ann offset to the generated noise.
config.measureCoaddSources.measurement.noiseReplacer.noiseOffset=0.0

# How to choose mean and variance of the Gaussian noise we generate?
# Allowed values:
# 	variance	Mean = 0, variance = the image's variance
# 	meta	Mean = 0, variance = the "BGMEAN" metadata entry
# 	measure	Measure clipped mean and variance from the whole image
# 
config.measureCoaddSources.measurement.noiseReplacer.noiseSource='measure'

# the name of the flux measurement algorithm used for calibration
config.measureCoaddSources.measurement.slots.calibFlux='base_CircularApertureFlux_12_0'

# the name of the algorithm used to set the source aperture flux slot
config.measureCoaddSources.measurement.slots.apFlux='base_CircularApertureFlux_3_0'

# the name of the algorithm used to set the source inst flux slot
config.measureCoaddSources.measurement.slots.instFlux='base_GaussianFlux'

# the name of the algorithm used to set source moments parameters
config.measureCoaddSources.measurement.slots.shape='ext_shapeHSM_HsmSourceMoments'

# the name of the centroiding algorithm used to set source x,y
config.measureCoaddSources.measurement.slots.centroid='base_SdssCentroid'

# the name of the algorithm used to set the source model flux slot
config.measureCoaddSources.measurement.slots.modelFlux='base_GaussianFlux'

# the name of the algorithm used to set the source psf flux slot
config.measureCoaddSources.measurement.slots.psfFlux='base_PsfFlux'

# When measuring, replace other detected footprints with noise?
config.measureCoaddSources.measurement.doReplaceWithNoise=True

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_FPPosition'].doMeasure=True

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_NaiveCentroid'].doMeasure=True

# Value to subtract from the image pixel values
config.measureCoaddSources.measurement.plugins['base_NaiveCentroid'].background=0.0

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_InputCount'].doMeasure=True

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_PeakLikelihoodFlux'].doMeasure=True

# Name of warping kernel (e.g. "lanczos4") used to compute the peak
config.measureCoaddSources.measurement.plugins['base_PeakLikelihoodFlux'].warpingKernelName='lanczos4'

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_SdssCentroid'].doMeasure=True

# if the peak's less than this insist on binning at least once
config.measureCoaddSources.measurement.plugins['base_SdssCentroid'].peakMin=-1.0

# fiddle factor for adjusting the binning
config.measureCoaddSources.measurement.plugins['base_SdssCentroid'].wfac=1.5

# maximum allowed binning
config.measureCoaddSources.measurement.plugins['base_SdssCentroid'].binmax=16

# Largest aperture for which to use the slow, accurate, sinc aperture code
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].maxSincRadius=10.0

# Number of times to iterate when setting the Kron radius
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].nIterForRadius=1

# Use the Footprint size as part of initial estimate of Kron radius
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].useFootprintRadius=False

# Minimum Kron radius (if == 0.0 use PSF's Kron radius) if enforceMinimumRadius. Also functions as fallback aperture radius if set.
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].minimumRadius=0.0

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].doMeasure=True

# Multiplier of rms size for aperture used to initially estimate the Kron radius
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].nSigmaForRadius=6.0

# If true check that the Kron radius exceeds some minimum
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].enforceMinimumRadius=True

# if true, use existing shape and centroid measurements instead of fitting
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].fixed=False

# Smooth image with N(0, smoothingSigma^2) Gaussian while estimating R_K
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].smoothingSigma=-1.0

# Number of Kron radii for Kron flux
config.measureCoaddSources.measurement.plugins['ext_photometryKron_KronFlux'].nRadiusForFlux=2.5

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmSourceMoments'].doMeasure=True

# Mask planes used to reject bad pixels.
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmSourceMoments'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_CircularApertureFlux'].doMeasure=True

# Warping kernel used to shift Sinc photometry coefficients to different center positions
config.measureCoaddSources.measurement.plugins['base_CircularApertureFlux'].shiftKernel='lanczos5'

# Radius (in pixels) of apertures.
config.measureCoaddSources.measurement.plugins['base_CircularApertureFlux'].radii=[3.0, 4.5, 6.0, 9.0, 12.0, 17.0, 25.0, 35.0, 50.0, 70.0]

# Maximum radius (in pixels) for which the sinc algorithm should be used instead of the faster naive algorithm.  For elliptical apertures, this is the minor axis radius.
config.measureCoaddSources.measurement.plugins['base_CircularApertureFlux'].maxSincRadius=12.0

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_Jacobian'].doMeasure=True

# Nominal pixel size (arcsec)
config.measureCoaddSources.measurement.plugins['base_Jacobian'].pixelScale=0.5

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_GaussianCentroid'].doMeasure=True

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_GaussianFlux'].doMeasure=True

# FIXME! NEVER DOCUMENTED!
config.measureCoaddSources.measurement.plugins['base_GaussianFlux'].background=0.0

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmPsfMoments'].doMeasure=True

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeBj'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeBj'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# Field name for number of deblend children
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeBj'].deblendNChild=''

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_ScaledApertureFlux'].doMeasure=True

# Warping kernel used to shift Sinc photometry coefficients to different center positions
config.measureCoaddSources.measurement.plugins['base_ScaledApertureFlux'].shiftKernel='lanczos5'

# Scaling factor of PSF FWHM for aperture radius.
config.measureCoaddSources.measurement.plugins['base_ScaledApertureFlux'].scale=3.14

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_PsfFlux'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.measureCoaddSources.measurement.plugins['base_PsfFlux'].badMaskPlanes=[]

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeKsb'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeKsb'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# Field name for number of deblend children
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeKsb'].deblendNChild=''

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_Blendedness'].doMeasure=True

# Whether to compute quantities related to the Gaussian-weighted shape
config.measureCoaddSources.measurement.plugins['base_Blendedness'].doShape=True

# Whether to compute HeavyFootprint dot products (the old deblend.blendedness parameter)
config.measureCoaddSources.measurement.plugins['base_Blendedness'].doOld=True

# Whether to compute quantities related to the Gaussian-weighted flux
config.measureCoaddSources.measurement.plugins['base_Blendedness'].doFlux=True

# Radius factor that sets the maximum extent of the weight function (and hence the flux measurements)
config.measureCoaddSources.measurement.plugins['base_Blendedness'].nSigmaWeightMax=3.0

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeLinear'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeLinear'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# Field name for number of deblend children
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeLinear'].deblendNChild=''

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_PeakCentroid'].doMeasure=True

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_PixelFlags'].doMeasure=True

# List of mask planes to be searched for which occur in the center of a footprint. If any of the planes are found they will have a corresponding pixel flag set.
config.measureCoaddSources.measurement.plugins['base_PixelFlags'].masksFpCenter=['BRIGHT_OBJECT']

# List of mask planes to be searched for which occur anywhere within a footprint. If any of the planes are found they will have a corresponding pixel flag set.
config.measureCoaddSources.measurement.plugins['base_PixelFlags'].masksFpAnywhere=['CLIPPED', 'BRIGHT_OBJECT']

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_SkyCoord'].doMeasure=True

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_Variance'].doMeasure=True

# Scale factor to apply to shape for aperture
config.measureCoaddSources.measurement.plugins['base_Variance'].scale=5.0

# Mask planes to ignore
config.measureCoaddSources.measurement.plugins['base_Variance'].mask=['DETECTED', 'DETECTED_NEGATIVE', 'BAD', 'SAT']

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeRegauss'].doMeasure=True

# Mask planes that indicate pixels that should be excluded from the fit
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeRegauss'].badMaskPlanes=['BAD', 'SAT', 'INTRP']

# Field name for number of deblend children
config.measureCoaddSources.measurement.plugins['ext_shapeHSM_HsmShapeRegauss'].deblendNChild='deblend_nChild'

# Maximum centroid shift, limited to 2-10
config.measureCoaddSources.measurement.plugins['base_SdssShape'].maxShift=0.0

# Convergence tolerance for FWHM
config.measureCoaddSources.measurement.plugins['base_SdssShape'].tol2=9.999999747378752e-05

# Convergence tolerance for e1,e2
config.measureCoaddSources.measurement.plugins['base_SdssShape'].tol1=9.999999747378752e-06

# Whether to also compute the shape of the PSF model
config.measureCoaddSources.measurement.plugins['base_SdssShape'].doMeasurePsf=True

# whether to run this plugin in single-object mode
config.measureCoaddSources.measurement.plugins['base_SdssShape'].doMeasure=True

# Additional value to add to background
config.measureCoaddSources.measurement.plugins['base_SdssShape'].background=0.0

# Maximum number of iterations
config.measureCoaddSources.measurement.plugins['base_SdssShape'].maxIter=100

config.measureCoaddSources.measurement.plugins.names=['base_CircularApertureFlux', 'base_InputCount', 'base_NaiveCentroid', 'base_PixelFlags', 'base_SkyCoord', 'base_PsfFlux', 'base_Variance', 'base_GaussianCentroid', 'ext_shapeHSM_HsmShapeRegauss', 'base_SdssCentroid', 'ext_photometryKron_KronFlux', 'base_GaussianFlux', 'ext_shapeHSM_HsmPsfMoments', 'base_SdssShape', 'ext_shapeHSM_HsmSourceMoments']
# What to do when a peak to be deblended is close to the edge of the image
# Allowed values:
# 	ramp	Ramp down flux at the image edge by the PSF
# 	noclip	Ignore the edge when building the symmetric template.
# 	clip	Clip the template at the edge AND the mirror of the edge.
# 	None	Field is optional
# 
config.measureCoaddSources.deblend.edgeHandling='ramp'

# Assign stray flux to deblend children.  Implies findStrayFlux.
config.measureCoaddSources.deblend.assignStrayFlux=True

# Mask planes with the corresponding limit on the fraction of masked pixels. Sources violating this limit will not be deblended.
config.measureCoaddSources.deblend.maskLimits={}

# How to split flux among peaks
# Allowed values:
# 	trim	Shrink the parent footprint to pixels that are not assigned to children
# 	r-to-peak	~ 1/(1+R^2) to the peak
# 	r-to-footprint	~ 1/(1+R^2) to the closest pixel in the footprint.  CAUTION: this can be computationally expensive on large footprints!
# 	nearest-footprint	Assign 100% to the nearest footprint (using L-1 norm aka Manhattan distance)
# 	None	Field is optional
# 
config.measureCoaddSources.deblend.strayFluxRule='trim'

# If True, catch exceptions thrown by the deblender, log them, and set a flag on the parent, instead of letting them propagate up
config.measureCoaddSources.deblend.catchFailures=False

# When the deblender should attribute stray flux to point sources
# Allowed values:
# 	always	Always
# 	never	Never; stray flux will not be attributed to any deblended child if the deblender thinks all peaks look like point sources
# 	necessary	When there is not an extended object in the footprint
# 	None	Field is optional
# 
config.measureCoaddSources.deblend.strayFluxToPointSources='necessary'

# Chi-squared per DOF cut for deciding a source is a PSF during deblending (shifted PSF model #2)
config.measureCoaddSources.deblend.psfChisq2b=1.5

# Mask planes to ignore when performing statistics
config.measureCoaddSources.deblend.maskPlanes=['SAT', 'INTRP', 'NO_DATA']

# Maximum area for footprints before they are ignored as large; non-positive means no threshold applied
config.measureCoaddSources.deblend.maxFootprintArea=1000000

# Minimum axis ratio for footprints before they are ignored as large; non-positive means no threshold applied
config.measureCoaddSources.deblend.minFootprintAxisRatio=0.0

# Maximum linear dimension for footprints before they are ignored as large; non-positive means no threshold applied
config.measureCoaddSources.deblend.maxFootprintSize=0

# Chi-squared per DOF cut for deciding a source is a PSF during deblending (un-shifted PSF model)
config.measureCoaddSources.deblend.psfChisq1=1.5

# Find stray flux---flux not claimed by any child in the deblender.
config.measureCoaddSources.deblend.findStrayFlux=True

# Footprints smaller in width or height than this value will be ignored; minimum of 2 due to PSF gradient calculation.
# 	Valid Range = [2,inf)
config.measureCoaddSources.deblend.tinyFootprintSize=2

# Chi-squared per DOF cut for deciding a source is PSF during deblending (shifted PSF model)
config.measureCoaddSources.deblend.psfChisq2=1.5

# Guarantee that all peaks produce a child source.
config.measureCoaddSources.deblend.propagateAllPeaks=True

# Mask name for footprints not deblended, or None
config.measureCoaddSources.deblend.notDeblendedMask='NOT_DEBLENDED'

# Only deblend the brightest maxNumberOfPeaks peaks in the parent (<= 0: unlimited)
config.measureCoaddSources.deblend.maxNumberOfPeaks=0

# When splitting stray flux, clip fractions below this value to zero.
config.measureCoaddSources.deblend.clipStrayFluxFraction=0.001

# correction factor for psfFlux error
config.measureCoaddSources.afterburners.plugins['base_ClassificationExtendedness'].psfErrFactor=0.0

# correction factor for modelFlux error
config.measureCoaddSources.afterburners.plugins['base_ClassificationExtendedness'].modelErrFactor=0.0

# critical ratio of model to psf flux
config.measureCoaddSources.afterburners.plugins['base_ClassificationExtendedness'].fluxRatio=0.925

config.measureCoaddSources.afterburners.plugins.names=['base_ClassificationExtendedness']
# Names of filters which should never be primary
config.measureCoaddSources.setPrimaryFlags.pseudoFilterList=['sky']

# Name of field in schema with number of deblended children
config.measureCoaddSources.setPrimaryFlags.nChildKeyName='deblend_nChild'

# Default reference catalog filter to use if filter not specified in exposure; if blank then filter must be specified in exposure
config.measureCoaddSources.match.refObjLoader.defaultFilter=''

# Padding to add to 4 all edges of the bounding box (pixels)
# 	Valid Range = [0,inf)
config.measureCoaddSources.match.refObjLoader.pixelMargin=50

# Mapping of camera filter name: reference catalog filter name; each reference filter must exist
config.measureCoaddSources.match.refObjLoader.filterMap={'B': 'g', 'N1010': 'z', 'N816': 'i', 'I': 'i', 'N387': 'g', 'i2': 'i', 'R': 'r', 'N921': 'z', 'N515': 'g', 'V': 'r', 'y': 'z'}

# Matching radius, arcsec
config.measureCoaddSources.match.matchRadius=0.25

# Name of flux measurement for calculating the S/N when choosing the reference band.
config.mergeCoaddMeasurements.snName='base_PsfFlux'

# Priority-ordered list of bands for the merge.
config.mergeCoaddMeasurements.priorityList=['HSC-I2', 'HSC-I', 'HSC-R', 'HSC-Z', 'HSC-Y', 'HSC-G', 'NB0921', 'NB0816', 'NB1010', 'NB0387', 'NB0515']

# Name of coadd
config.mergeCoaddMeasurements.coaddName='deep'

# Names of filters which may have no associated detection
# (N.b. should include MergeDetectionsConfig.skyFilterName)
config.mergeCoaddMeasurements.pseudoFilterList=['sky']

# Require that these flags, if available, are not set
config.mergeCoaddMeasurements.flags=['base_PixelFlags_flag_interpolatedCenter', 'base_PsfFlux_flag', 'ext_photometryKron_KronFlux_flag', 'modelfit_CModel_flag']

# If the S/N from the priority band is below this value (and the S/N is larger than minSNDiff compared to the priority band), use the band with the largest S/N as the reference band.
config.mergeCoaddMeasurements.minSN=10.0

# If the difference in S/N between another band and the priority band is larger than this value (and the S/N in the priority band is less than minSN) use the band with the largest S/N as the reference band
config.mergeCoaddMeasurements.minSNDiff=3.0

# Clobber existing measurements?
config.clobberMeasurements=False

